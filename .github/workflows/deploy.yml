name: Deploy VOYZ Application
on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            # Node.js 설정 (React 빌드용)
            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '18'

            # React 앱 빌드
            - name: Install React dependencies
              run: |
                  cd WEBAPP
                  npm install

            - name: Build React app
              run: |
                  cd WEBAPP
                  npm run build

            # Java 설정 (Spring Boot 빌드용)
            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  java-version: '17'
                  distribution: 'temurin'

            # React 빌드 파일을 Spring Boot static 폴더로 복사
            - name: Copy React build to Spring Boot
              run: |
                  rm -rf backend/src/main/resources/static/*
                  cp -r WEBAPP/dist/* backend/src/main/resources/static/

            # Spring Boot 빌드
            - name: Grant execute permission for mvnw
              run: chmod +x backend/mvnw

            - name: Build Spring Boot with React
              run: |
                  cd backend
                  ./mvnw clean package -DskipTests

            # EC2 배포 (rsync 사용)
            - name: Deploy to EC2
              uses: burnett01/rsync-deployments@6.0.0
              with:
                  switches: -avzr --delete
                  path: backend/target/
                  remote_path: /home/ubuntu/app/
                  remote_host: ${{ secrets.EC2_HOST }}
                  remote_user: ${{ secrets.EC2_USERNAME }}
                  remote_key: ${{ secrets.EC2_PRIVATE_KEY }}

            # EC2에서 앱 재시작
            - name: Restart application on EC2
              uses: appleboy/ssh-action@v0.1.5
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USERNAME }}
                  key: ${{ secrets.EC2_PRIVATE_KEY }}
                  timeout: 120s
                  command_timeout: 10m
                  debug: true
                  script: |
                      # 기존 프로세스 종료
                      sudo pkill -f 'java.*voiz' || true

                      # 새 앱 실행
                      cd ~/app
                      nohup java -jar -Dspring.profiles.active=prod -Duser.timezone=Asia/Seoul -Djava.net.preferIPv4Stack=true -Dserver.address=0.0.0.0 -Djwt.secret="${{ secrets.JWT_SECRET }}" *.jar > app.log 2>&1 &

                      # 실행 확인
                      sleep 10
                      curl -f http://localhost:8081 || exit 1

    deploy-ml:
        runs-on: ubuntu-latest
        needs: build-and-deploy

        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: '3.9'

            - name: Install ML dependencies
              run: |
                  cd ml
                  pip install -r requirements.txt

            - name: Test SSH Connection
              uses: appleboy/ssh-action@v0.1.5
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USERNAME }}
                  key: ${{ secrets.EC2_PRIVATE_KEY }}
                  timeout: 60s
                  debug: true
                  script: |
                      echo "SSH connection successful"
                      whoami
                      pwd
                      ls -la

            - name: Deploy ML to EC2
              uses: appleboy/scp-action@v0.1.4
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USERNAME }}
                  key: ${{ secrets.EC2_PRIVATE_KEY }}
                  port: 22
                  timeout: 300s
                  command_timeout: 600s
                  source: 'ml/*'
                  target: '~/ml-app'
                  strip_components: 1
                  debug: true
                  use_insecure_cipher: false
                  rm: false
                  overwrite: true

            - name: Setup and restart ML service
              uses: appleboy/ssh-action@v0.1.5
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USERNAME }}
                  key: ${{ secrets.EC2_PRIVATE_KEY }}
                  timeout: 120s
                  command_timeout: 10m
                  debug: true
                  script: |
                      # ML 서비스 설정
                      cd ~/ml-app
                      python3 -m venv venv || true
                      source venv/bin/activate
                      pip install -r requirements.txt

                      # 환경 변수 설정
                      echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
                      echo "GOOGLE_APPLICATION_CREDENTIALS=/home/ubuntu/ml-app/google-credentials.json" >> .env
                      echo "FASTAPI_HOST=0.0.0.0" >> .env
                      echo "FASTAPI_PORT=8000" >> .env
                      echo "FASTAPI_DEBUG=False" >> .env

                      # Google Cloud 서비스 계정 키 파일 생성
                      echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' > google-credentials.json
                      chmod 600 google-credentials.json  # 보안을 위한 권한 설정

                      # JSON 파일 유효성 검증
                      python3 -c "import json; json.load(open('google-credentials.json'))" || (echo "Invalid JSON in GOOGLE_APPLICATION_CREDENTIALS secret" && exit 1)

                      # Google Cloud 인증 테스트
                      export GOOGLE_APPLICATION_CREDENTIALS=/home/ubuntu/ml-app/google-credentials.json
                      python3 -c "from google.cloud import vision; print('Google Cloud Vision API 연결 성공')" || echo "Google Cloud 인증 실패 - OCR 기능 비활성화됨"

                      # ML 서비스 재시작
                      sudo pkill -f 'uvicorn.*main:app' || true
                      nohup venv/bin/uvicorn main:app --host 0.0.0.0 --port 8000 > ml.log 2>&1 &
