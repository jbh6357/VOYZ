package com.voyz.presentation.screen.management.review.component

import androidx.compose.foundation.horizontalScroll
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

data class FilterChipItem(
    val id: String,
    val label: String,
    val emoji: String = "",
    val isSelected: Boolean = false,
    val type: FilterType
)

enum class FilterType {
    SENTIMENT, NATIONALITY, RATING, SORT
}

@Composable
fun FilterChips(
    availableNationalities: List<String> = emptyList(),
    selectedSentiment: String = "Ï†ÑÏ≤¥",
    selectedNationality: String? = null,
    selectedRating: Int? = null,
    selectedSort: String = "ÏµúÏã†Ïàú",
    onSentimentChange: (String) -> Unit = {},
    onNationalityChange: (String?) -> Unit = {},
    onRatingChange: (Int?) -> Unit = {},
    onSortChange: (String) -> Unit = {},
    modifier: Modifier = Modifier
) {
    // ÌïÑÌÑ∞ Ïπ© Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
    val chips = remember(availableNationalities, selectedSentiment, selectedNationality, selectedRating, selectedSort) {
        buildList {
            // Í∞êÏ†ï ÌïÑÌÑ∞
            add(FilterChipItem("all", "Ï†ÑÏ≤¥", "", selectedSentiment == "Ï†ÑÏ≤¥", FilterType.SENTIMENT))
            add(FilterChipItem("positive", "Í∏çÏ†ïÎßå", "üòä", selectedSentiment == "Í∏çÏ†ï", FilterType.SENTIMENT))
            add(FilterChipItem("negative", "Î∂ÄÏ†ïÎßå", "üòû", selectedSentiment == "Î∂ÄÏ†ï", FilterType.SENTIMENT))
            
            // Íµ≠Í∞Ä ÌïÑÌÑ∞ (ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Íµ≠Í∞ÄÎßå)
            availableNationalities.take(5).forEach { nationality ->
                val flag = getNationalityFlag(nationality)
                val isSelected = selectedNationality == nationality
                add(FilterChipItem(nationality, nationality, flag, isSelected, FilterType.NATIONALITY))
            }
            
            // ÌèâÏ†ê ÌïÑÌÑ∞
            listOf(5, 4, 3, 2, 1).forEach { rating ->
                val stars = "‚≠ê".repeat(rating)
                val isSelected = selectedRating == rating
                add(FilterChipItem("rating_$rating", "${rating}Ï†ê", stars, isSelected, FilterType.RATING))
            }
            
            // Ï†ïÎ†¨
            add(FilterChipItem("latest", "ÏµúÏã†Ïàú", "üìÖ", selectedSort == "ÏµúÏã†Ïàú", FilterType.SORT))
            add(FilterChipItem("oldest", "Ïò§ÎûòÎêúÏàú", "üìä", selectedSort == "Ïò§ÎûòÎêúÏàú", FilterType.SORT))
        }
    }
    
    Row(
        modifier = modifier
            .fillMaxWidth()
            .horizontalScroll(rememberScrollState())
            .padding(horizontal = 16.dp),
        horizontalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        chips.forEach { chip ->
            FilterChip(
                chip = chip,
                onClick = {
                    when (chip.type) {
                        FilterType.SENTIMENT -> {
                            when (chip.id) {
                                "all" -> onSentimentChange("Ï†ÑÏ≤¥")
                                "positive" -> onSentimentChange("Í∏çÏ†ï")
                                "negative" -> onSentimentChange("Î∂ÄÏ†ï")
                            }
                        }
                        FilterType.NATIONALITY -> {
                            if (chip.isSelected) {
                                onNationalityChange(null)
                            } else {
                                onNationalityChange(chip.id)
                            }
                        }
                        FilterType.RATING -> {
                            val rating = chip.id.removePrefix("rating_").toIntOrNull()
                            if (chip.isSelected) {
                                onRatingChange(null)
                            } else {
                                onRatingChange(rating)
                            }
                        }
                        FilterType.SORT -> {
                            when (chip.id) {
                                "latest" -> onSortChange("ÏµúÏã†Ïàú")
                                "oldest" -> onSortChange("Ïò§ÎûòÎêúÏàú")
                            }
                        }
                    }
                }
            )
        }
    }
}

@Composable
private fun FilterChip(
    chip: FilterChipItem,
    onClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    val backgroundColor = if (chip.isSelected) Color(0xFFCD212A) else Color.White
    val textColor = if (chip.isSelected) Color.White else Color(0xFF374151)
    val borderColor = if (chip.isSelected) Color(0xFFCD212A) else Color(0xFFE5E7EB)
    
    Card(
        modifier = modifier,
        shape = RoundedCornerShape(20.dp),
        colors = CardDefaults.cardColors(containerColor = backgroundColor),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        onClick = onClick
    ) {
        Row(
            modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(4.dp)
        ) {
            if (chip.emoji.isNotEmpty()) {
                Text(
                    text = chip.emoji,
                    fontSize = 14.sp
                )
            }
            
            Text(
                text = chip.label,
                fontSize = 13.sp,
                fontWeight = FontWeight.Medium,
                color = textColor,
                maxLines = 1
            )
        }
    }
}

private fun getNationalityFlag(nationality: String): String {
    return when (nationality) {
        "ÌïúÍµ≠" -> "üá∞üá∑"
        "ÎØ∏Íµ≠" -> "üá∫üá∏"
        "ÏùºÎ≥∏" -> "üáØüáµ"
        "Ï§ëÍµ≠" -> "üá®üá≥"
        "ÏòÅÍµ≠" -> "üá¨üáß"
        "ÌîÑÎûëÏä§" -> "üá´üá∑"
        "ÎèÖÏùº" -> "üá©üá™"
        "Ï∫êÎÇòÎã§" -> "üá®üá¶"
        "Ìò∏Ï£º" -> "üá¶üá∫"
        else -> "üåç"
    }
}