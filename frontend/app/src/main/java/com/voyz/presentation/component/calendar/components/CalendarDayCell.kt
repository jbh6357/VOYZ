package com.voyz.presentation.component.calendar.components

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.drawBehind
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.voyz.datas.model.DailyMarketingOpportunities
import com.voyz.datas.model.Priority
import com.voyz.ui.theme.MarketingColors
import java.time.LocalDate

@Composable
fun MarketingCalendarDayCell(
    modifier: Modifier = Modifier,
    date: LocalDate,
    isCurrentMonth: Boolean,
    isSelected: Boolean,
    dailyOpportunities: DailyMarketingOpportunities?,
    onClick: () -> Unit
) {
    val textColor = when {
        !isCurrentMonth -> MarketingColors.TextTertiary
        date.dayOfWeek.value == 7 -> MarketingColors.HighPriority
        date.dayOfWeek.value == 6 -> MarketingColors.TextSecondary
        else -> MarketingColors.TextPrimary
    }

    Column(
        modifier = modifier
            .background(Color.White)
            .drawBehind {
                drawLine(
                    color = MarketingColors.TextTertiary.copy(alpha = 0.2f),
                    start = Offset(0f, 0f),
                    end = Offset(size.width, 0f),
                    strokeWidth = 1.dp.toPx()
                )
            }
            .clickable { onClick() }
            .padding(4.dp),
        verticalArrangement = Arrangement.Top
    ) {
        // ÎÇ†Ïßú + ÎÇ†Ïî®
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = date.dayOfMonth.toString(),
                color = textColor,
                fontWeight = FontWeight.Medium,
                modifier = if (isSelected) {
                    Modifier.background(Color(0xFF2196F3), CircleShape)
                        .padding(horizontal = 6.dp, vertical = 2.dp)
                } else Modifier.padding(2.dp)
            )
            val today = LocalDate.now()
            val startOfWeek = today.minusDays(today.dayOfWeek.value % 7L)
            val endOfWeek = startOfWeek.plusDays(6)
            if (date in startOfWeek..endOfWeek) {
                val emoji = remember(date) {
                    listOf("‚òÄÔ∏è", "üå§Ô∏è", "‚òÅÔ∏è", "üåßÔ∏è", "‚õÖ")[date.dayOfMonth % 5]
                }
                Text(
                    text = emoji,
                    fontSize = 10.sp,
                    modifier = if (!isCurrentMonth) Modifier.alpha(0.3f) else Modifier
                )
            }
        }

        // ÎßàÏºÄÌåÖ Í∏∞Ìöå ÏòÅÏó≠ (weight ÏÇ¨Ïö©)
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .weight(1f),
            verticalArrangement = Arrangement.Top
        ) {
            // Î≥ÄÍ≤Ω: Ï≤òÏùå 5Í∞úÎßå ÌëúÏãú
            dailyOpportunities?.opportunities?.take(5)?.forEach { opportunity ->
                // Î¶¨ÎßàÏù∏Îçî vs Ï†úÏïà Ï≤òÎ¶¨ Î°úÏßÅ Í∑∏ÎåÄÎ°ú
                val contentModifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 2.dp, vertical = 2.dp)  // paddingÏùÑ 2dpÎ°ú Ï§ÑÏûÑ

                if (opportunity.title.startsWith("[Î¶¨ÎßàÏù∏Îçî]")) {
                    // Î¶¨ÎßàÏù∏Îçî Î∞ïÏä§
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = contentModifier
                            .alpha(if (!isCurrentMonth) 0.3f else 1f)
                    ) {
                        // ÏÑ∏Î°ú Î∞îÎäî Í∑∏ÎåÄÎ°ú
                        // ‚Ä¶
                        Text(
                            text = opportunity.title.removePrefix("[Î¶¨ÎßàÏù∏Îçî] "),
                            style = MaterialTheme.typography.labelSmall,
                            fontSize = 8.sp,     // Í∏ÄÏûê ÌÅ¨Í∏∞ 8spÎ°ú Ï§ÑÏûÑ
                            maxLines = 1,
                            overflow = TextOverflow.Ellipsis,
                            modifier = Modifier.weight(1f)
                        )
                    }
                } else {
                    // Ï†úÏïà/Í∏∞Ìöå Î∞ïÏä§
                    Box(
                        modifier = contentModifier
                            .background(
                                color = when (opportunity.priority) {
                                    Priority.MEDIUM -> Color(0xFFFFC107).copy(alpha = 0.4f)
                                    Priority.LOW -> Color(0xFF9E9E9E).copy(alpha = 0.4f)
                                    else -> Color(0xFF9E9E9E).copy(alpha = 0.4f)
                                },
                                shape = RoundedCornerShape(4.dp)
                            )
                            .padding(horizontal = 2.dp, vertical = 2.dp)  // ÎÇ¥Î∂Ä Ìå®Îî©ÎèÑ Ï§ÑÏûÑ
                            .alpha(if (!isCurrentMonth) 0.3f else 1f)
                    ) {
                        Text(
                            text = opportunity.title,
                            style = MaterialTheme.typography.labelSmall,
                            fontSize = 10.sp,     // Í∏ÄÏûê ÌÅ¨Í∏∞ 8spÎ°ú Ï§ÑÏûÑ
                            maxLines = 2,        // Ìïú Ï§ÑÎ°ú Ï∂©Î∂ÑÌïòÎã§Î©¥ 1Ï§ÑÎ°ú Ï§ÑÏù¥Í∏∞
                            overflow = TextOverflow.Ellipsis
                        )
                    }
                }
            }

            // Îçî ÎßéÏùÄ Í∏∞ÌöåÍ∞Ä ÏûàÏùÑ Îïå +Ïπ¥Ïö¥ÌÑ∞ (5Í∞ú Ïù¥ÌõÑ)
            dailyOpportunities?.let {
                val extra = it.totalCount - 5
                if (extra > 0) {
                    Text(
                        text = "+$extra",
                        style = MaterialTheme.typography.labelSmall,
                        fontSize = 8.sp,   // Ïπ¥Ïö¥ÌÑ∞ÎèÑ Ï¢Ä Îçî ÏûëÍ≤å
                        modifier = Modifier.padding(top = 2.dp, start = 2.dp)
                    )
                }
            }
        }
    }
}