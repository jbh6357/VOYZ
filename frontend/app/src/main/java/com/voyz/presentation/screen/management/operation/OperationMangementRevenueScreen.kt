package com.voyz.presentation.screen.management.operation


import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.ExposedDropdownMenuBox
import androidx.compose.material3.ExposedDropdownMenuDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.DateRange
import androidx.compose.material3.Button
import androidx.compose.material3.Icon
import androidx.compose.material3.Surface
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.window.DialogProperties
import com.voyz.presentation.screen.management.operation.graph.MonthlyRevenueLineChartAnimated
import com.voyz.presentation.screen.management.operation.graph.TopMenuDonutChartAnimated
import java.time.LocalDate
import java.time.temporal.ChronoUnit
import kotlin.math.floor
import kotlin.math.max



fun formatMonthWeek(date: LocalDate): String {
    val month = date.monthValue
    val week = ((date.dayOfMonth - 1) / 7) + 1
    return "${month}Ïõî ${week}Ï£ºÏ∞®"
}
fun generateXAxisLabels(
    start: LocalDate,
    end:   LocalDate,
    granularity: PeriodTab,
    slots: Int
): List<String> = when (granularity) {
    PeriodTab.YEAR -> {
        // Î∂ÑÍ∏∞ÎßàÎã§ Î≥¥Ïó¨Ï§Ñ ÎïåÎäî slots=4, stepMonths=12/slots
        val step = 12 / slots
        (1..slots).map { "${it*step}Ïõî" }
    }
    PeriodTab.MONTH -> {
        // Ìïú Îã¨ ÎèôÏïà Ï£ºÏ∞®Î•º slotsÎßåÌÅº ÎΩëÏùÑ Îïê
        (1..slots).map { "${it}Ï£ºÏ∞®" }
    }
    PeriodTab.WEEK -> {
        // ÏùºÏ£ºÏùºÏùÑ ÏöîÏùºÎ≥ÑÎ°ú slots=7Î°ú ÎëêÎ©¥
        listOf("Ïõî","Ìôî","Ïàò","Î™©","Í∏à","ÌÜ†","Ïùº")
            .take(slots)
    }
}
@Composable
fun OperationManagementRevenueScreen() {
    // ‚îÄ‚îÄ 1) ÎÇ†Ïßú Í∏∞Î≥∏Í∞í Í≥ÑÏÇ∞ (ÏßÄÎÇúÎã¨~Ïù¥Î≤àÎã¨)
    val today     = LocalDate.now()
    // Í∏∞Î≥∏: ÏßÄÎÇúÎã¨~Ïò§Îäò
    val defaultStart = today.minusMonths(1).withDayOfMonth(1)
    val defaultEnd   = today

    val lastMonth = today.minusMonths(1)
    val defaultPeriod = "${lastMonth.year} ${lastMonth.monthValue}Ïõî ~ ${today.year} ${today.monthValue}Ïõî Îß§Ï∂úÎπÑÍµê"

    // ‚ë† Î∑∞Î™®Îìú(Í∑∏Îûúularity)
    var topGranularity by remember { mutableStateOf(PeriodTab.MONTH) }
    // ‚ë° Í∏∞Í∞Ñ Î≤îÏúÑ
    var topStartDate   by remember { mutableStateOf(defaultStart) }
    var topEndDate     by remember { mutableStateOf(defaultEnd) }
    // ‚ë¢ Îã§Ïù¥ÏñºÎ°úÍ∑∏ Ïò§Ìîà ÌîåÎûòÍ∑∏

    // ‚îÄ‚îÄ 2) ÏÉÅÎã®/ÌïòÎã® Í≥†Ï†ï ÌÉÄÏù¥ÌãÄ
    val staticTitle = "Í∏∞Í∞ÑÎ≥Ñ Îß§Ï∂ú"
    val staticBottomTitle = "Î©îÎâ¥Î≥Ñ Îß§Ï∂ú TOP 5"

    // ‚îÄ‚îÄ 3) ÏÉÅÎã®/ÌïòÎã® Í∏∞Í∞Ñ Ï†ïÎ≥¥
    var topPeriodInfo    by remember { mutableStateOf(defaultPeriod) }
    var bottomPeriodInfo by remember { mutableStateOf(defaultPeriod) }

    // ‚îÄ‚îÄ 4) ÏÉÅÎã®/ÌïòÎã® Îã§Ïù¥ÏñºÎ°úÍ∑∏ Ïó¥Î¶º ÌîåÎûòÍ∑∏
    var isTopDialogOpen    by remember { mutableStateOf(false) }
    var isBottomDialogOpen by remember { mutableStateOf(false) }

    // ‚îÄ‚îÄ 5) ÏÉÅÎã® Îã§Ïù¥ÏñºÎ°úÍ∑∏
    if (isTopDialogOpen) {
        PeriodSelectionDialog(
            onDismiss = { isTopDialogOpen = false },
            onPeriodSelected = { sel ->
                // sel: "Ïó∞ÎèÑ: 2022 ~ 2025" or "Ïõî: 2025 5Ïõî ~ 2025 8Ïõî" or "Ï£º: 2025 8Ïõî 2Ï£ºÏ∞® ~ 2025 8Ïõî 3Ï£ºÏ∞®"
                when {
                    sel.startsWith("Ïó∞ÎèÑ: ") -> {
                        topGranularity = PeriodTab.YEAR
                        val (y1,y2) = sel.removePrefix("Ïó∞ÎèÑ: ").split("~").map { it.trim().toInt() }
                        topStartDate  = LocalDate.of(y1,1,1)
                        topEndDate    = LocalDate.of(y2,12,31)
                    }
                    sel.startsWith("Ïõî: ") -> {
                        topGranularity = PeriodTab.MONTH
                        val parts = sel.removePrefix("Ïõî: ").split("~").map { it.trim().split(" ") }
                        // parts = [["2025","5Ïõî"],["2025","8Ïõî"]]
                        val (sy,sm) = parts[0].let{ it[0].toInt() to it[1].dropLast(1).toInt() }
                        val (ey,em) = parts[1].let{ it[0].toInt() to it[1].dropLast(1).toInt() }
                        topStartDate = LocalDate.of(sy,sm,1)
                        topEndDate   = LocalDate.of(ey,em,1).withDayOfMonth(
                            LocalDate.of(ey,em,1).lengthOfMonth()
                        )
                    }
                    sel.startsWith("Ï£º: ") -> {
                        topGranularity = PeriodTab.WEEK
                        val parts = sel.removePrefix("Ï£º: ").split("~").map { it.trim().split(" ") }
                        // parts = [["2025","8Ïõî","2Ï£ºÏ∞®"],["2025","8Ïõî","3Ï£ºÏ∞®"]]
                        fun parseWeek(list: List<String>): LocalDate {
                            val y = list[0].toInt()
                            val m = list[1].dropLast(1).toInt()
                            val w = list[2].dropLast(2).toInt()
                            // Ìïú Îã¨ 1Ïùº Í∏∞Ï§Ä + (w-1)*7 Ïùº
                            return LocalDate.of(y,m,1).plusWeeks((w-1).toLong())
                        }
                        topStartDate = parseWeek(parts[0])
                        topEndDate   = parseWeek(parts[1])
                    }
                }
                isTopDialogOpen = false
            }
        )
    }

    // ‚îÄ‚îÄ 6) ÌïòÎã® Îã§Ïù¥ÏñºÎ°úÍ∑∏
    if (isBottomDialogOpen) {
        PeriodSelectionDialog(
            onDismiss = { isBottomDialogOpen = false },
            onPeriodSelected = { sel ->
                bottomPeriodInfo = formatForDisplay(sel)
                isBottomDialogOpen = false
            }
        )
    }
    val topMenuItems = listOf(
        MenuSales("ÌååÏä§ÌÉÄ",      250, Color(0xFFE57373)),
        MenuSales("ÎèàÍπåÏä§",      220, Color(0xFF64B5F6)),
        MenuSales("ÎÉâÎ™®Î∞Ä",      200, Color(0xFF81C784)),
        MenuSales("ÏπòÌÇ®ÏÉêÎü¨Îìú",  180, Color(0xFFFFB74D)),
        MenuSales("ÌñÑÎ≤ÑÍ±∞",      150, Color(0xFFBA68C8))
    )


    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
        // üëâ ÏÉÅÎã® ÏòÅÏó≠
        Box(
            modifier = Modifier
                .weight(1f)
                .fillMaxWidth()
                .background(Color.White, RoundedCornerShape(8.dp))
        ) {
            Column(modifier = Modifier.fillMaxSize()) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(start = 8.dp, bottom = 8.dp),
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Text(staticTitle,
                        style = MaterialTheme.typography.titleMedium.copy(
                            fontWeight = FontWeight.Bold,
                            fontSize   = 18.sp
                        )
                    )
                    Row(
                        modifier = Modifier
                            .clickable { isTopDialogOpen = true }
                            .padding(end = 12.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(Icons.Default.DateRange, contentDescription = "Í∏∞Í∞Ñ ÏÑ†ÌÉù", tint = Color.Gray)
                        Spacer(Modifier.width(4.dp))
                        Text("Í∏∞Í∞Ñ ÏÑ†ÌÉù", fontSize = 14.sp, color = Color.Black)
                    }
                }
                Spacer(Modifier.height(12.dp))

                MonthlyRevenueLineChartAnimated(
                    startDate   = topStartDate,
                    endDate     = topEndDate,
                    granularity = topGranularity,
                    periodInfo  = topPeriodInfo,
                    modifier    = Modifier
                        .fillMaxWidth()
                        .weight(1f)
                )
            }
        }

        Spacer(Modifier.height(16.dp))

        // üëâ ÌïòÎã® ÏòÅÏó≠
        Box(
            modifier = Modifier
                .weight(1f)
                .fillMaxWidth()
                .background(Color.White, RoundedCornerShape(8.dp))
        ) {
            Column(modifier = Modifier.fillMaxSize()) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(start = 8.dp, bottom = 8.dp, end = 12.dp),
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Text(staticBottomTitle,
                        style = MaterialTheme.typography.titleMedium.copy(
                            fontWeight = FontWeight.Bold,
                            fontSize   = 18.sp
                        )
                    )
                    Row(
                        modifier = Modifier
                            .clickable { isBottomDialogOpen = true }
                            .padding(end = 12.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(Icons.Default.DateRange, contentDescription = "Í∏∞Í∞Ñ ÏÑ†ÌÉù", tint = Color.Gray)
                        Spacer(Modifier.width(4.dp))
                        Text("Í∏∞Í∞Ñ ÏÑ†ÌÉù", fontSize = 14.sp, color = Color.Black)
                    }
                }
                Spacer(Modifier.height(12.dp))

                TopMenuDonutChartAnimated(
                    menuSales  = topMenuItems,
                    periodInfo = bottomPeriodInfo,
                    modifier   = Modifier
                        .fillMaxWidth()
                        .weight(1f)
                )
            }
        }
    }
}

// ‚îÄ‚îÄ helper: ÏÑ†ÌÉùÎêú Î¨∏ÏûêÏó¥ÏùÑ ÌôîÎ©¥Ïö©ÏúºÎ°ú Ìè¨Îß∑Ìï¥Ï£ºÎäî Ìï®Ïàò
fun formatForDisplay(selected: String): String = when {
    selected.startsWith("Ï£º: ") -> {
        val raw = selected.removePrefix("Ï£º: ").trim()
        raw.split("~")
            .map { it.trim().replaceFirst(Regex("""^(\d{4})\s"""), "$1ÎÖÑ ") }
            .let { "${it[0]} ~ ${it[1]} Îß§Ï∂úÎπÑÍµê" }
    }
    selected.startsWith("Ïõî: ") -> {
        selected.removePrefix("Ïõî: ").trim()
            .split("~").joinToString(" ~ ") + " Îß§Ï∂úÎπÑÍµê"
    }
    selected.startsWith("Ïó∞ÎèÑ: ") -> {
        selected.removePrefix("Ïó∞ÎèÑ: ").trim()
            .split("~")
            .map { it.trim() }
            .joinToString(" ~ ") { year -> "${year}ÎÖÑ" }
            .plus(" Îß§Ï∂úÎπÑÍµê")
    }
    else -> selected
}
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MonthSelector(
    selectedMonth: String,
    onMonthSelected: (String) -> Unit,
    modifier: Modifier = Modifier
) {
    val months = listOf(
        "2025ÎÖÑ 8Ïõî", "2025ÎÖÑ 7Ïõî", "2025ÎÖÑ 6Ïõî",
        "2025ÎÖÑ 5Ïõî", "2025ÎÖÑ 4Ïõî"
    )
    var expanded by remember { mutableStateOf(false) }

    ExposedDropdownMenuBox(
        expanded = expanded,
        onExpandedChange = { expanded = !expanded }
    ) {
        OutlinedTextField(
            readOnly = true,
            value = selectedMonth,
            onValueChange = {},
            label = { Text("Ïõî ÏÑ†ÌÉù") },
            trailingIcon = {
                ExposedDropdownMenuDefaults.TrailingIcon(expanded)
            },
            modifier = Modifier
                .menuAnchor()
                .width(160.dp) // ÎÑàÎπÑ Ï°∞Ï†ï
                .height(54.dp)
        )

        ExposedDropdownMenu(
            expanded = expanded,
            onDismissRequest = { expanded = false }
        ) {
            months.forEach { month ->
                DropdownMenuItem(
                    text = { Text(month) },
                    onClick = {
                        onMonthSelected(month)
                        expanded = false
                    }
                )
            }
        }
    }
}

// RevenueGraphPager.kt ÎåÄÏ≤¥

// ÎçîÎØ∏ Ï∞®Ìä∏Îì§

data class MenuSales( // ‚úÖ 1Î≤à ÏúÑÏπò
    val name: String,
    val count: Int,
    val color: Color
)


enum class PeriodTab { YEAR, MONTH, WEEK }


